services:
  server_rule:
    build: ./Server/
    image: edenchik/arhet:server.2.0.0
    # image: server_rule
    command: python ./server_rule.py
    # ports:
    #   - 30880:30880
    depends_on:
      - nanomq
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: "1.00"
          memory: 512M
      restart_policy:
        condition: on-failure
    networks:
      iot:
        aliases:
          - server_rule

  rule_engine:
    build: ./Rule/
    image: edenchik/arhet:engine.2.0.0
    # image: rule_engine
    command: python ./rule_engine.py
    depends_on:
      - server_rule
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: "1.00"
          memory: 512M
      restart_policy:
        condition: on-failure
    networks:
      iot:
        aliases:
          - rule_engine

  # Основной мастер PostgreSQL
  postgres-primary:
    image: postgres:17.4-alpine
    # user: postgres
    environment:
      POSTGRES_DB: "postgres"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "cadri"
      OSTGRES_HOST_AUTH_METHOD: "trust\nhost replication all 0.0.0.0/0 trust"
      POSTGRES_INITDB_ARGS: "--auth-host=trust"
    volumes:
      - ./postgdata-primary:/var/lib/postgresql/data
      - ./init-prim:/docker-entrypoint-initdb.d/init-role.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: |
      postgres 
      -c wal_level=replica 
      -c hot_standby=on 
      -c max_wal_senders=10
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
      -c max_connections=200
      -c shared_buffers=1GB
      -c effective_cache_size=4GB
      -c work_mem=16MB
      -c maintenance_work_mem=512MB
      -c random_page_cost=1.1
      -c temp_file_limit=10GB
      -c log_min_duration_statement=200ms
      -c idle_in_transaction_session_timeout=10s
      -c lock_timeout=1s
      -c statement_timeout=60s
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.max=10000
      -c pg_stat_statements.track=all
    networks:
      iot:
        aliases:
          - postgres-primary

  # Реплика PostgreSQL
  postgres-replica:
    image: postgres:17.4-alpine
    user: postgres
    environment:
      POSTGRES_DB: "replication"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "cadri"
      POSTGRES_MASTER: postgres-primary
      PGUSER: replicator
      PGPASSWORD: replication
    volumes:
      - ./postgdata-replica:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    depends_on:
      - postgres-primary
    command: |
      bash -c "              
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=postgres-primary --port=5432
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    networks:
      iot:
        aliases:
          - postgres-replica

  # Сервис Citus: координатор
  # citus-coordinator:
  #   image: citusdata/citus:11.0
  #   # container_name: citus-coordinator
  #   user: postgres 
  #   environment:
  #     POSTGRES_DB: "postgres"
  #     POSTGRES_USER: "postgres"
  #     POSTGRES_PASSWORD: cadri
  #   ports:
  #     - "5434:5432"
  #   volumes:
  #     - ./citus-data:/var/lib/postgresql/data
  #     - ./init-scripts:/docker-entrypoint-initdb.d
  #   restart: always
  #   networks:
  #     iot:
  #       aliases:
  #         - citus-coordinator

  # Воркер Citus
  # citus-worker1:
  #   image: citusdata/citus:11.0
  #   user: postgres 
  #   environment:
  #     POSTGRES_DB: "postgres"
  #     POSTGRES_USER: "postgres"
  #     POSTGRES_PASSWORD: cadri
  #   ports:
  #     - "5435:5432"
  #   volumes:
  #     - ./citus-worker1-data:/var/lib/postgresql/data
  #     - ./init-scripts:/docker-entrypoint-initdb.d
  #   networks:
  #     iot:
  #       aliases:
  #         - citus-worker1

  pgadmin:
    image: dpage/pgadmin4:9.1
    environment:
      PGADMIN_DEFAULT_EMAIL: "ermo30@yandex.ru"
      PGADMIN_DEFAULT_PASSWORD: "cadri"
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      - postgres-primary
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    networks:
      iot:
        aliases:
          - pgadmin

  nanomq:
    image: emqx/nanomq:latest
    container_name: nanomq
    ports:
      - "1883:1883"
      - "8080:8080"
      - "1884:1884"
    environment:
      NANOQ_LOG_LEVEL: info
    restart: always
    deploy:
      replicas: 1
    networks:
      iot:
        aliases:
          - nanomq

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:v0.10.1
    environment:
      DATA_SOURCE_URI: "postgres:5432/postgresql?sslmode=disable"
      DATA_SOURCE_USER: "postgres"
      DATA_SOURCE_PASS: "cadri"
      PG_EXPORTER_EXTEND_QUERY_PATH: "/etc/postgres_exporter/queries.yaml"
    ports:
      - "9187:9187"
    depends_on:
      - postgres-primary
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 500M
    networks:
      iot:
        aliases:
          - postgres_exporter

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./config:/etc/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    restart: on-failure
    deploy:
      replicas: 1
    networks:
      iot:
        aliases:
          - prometheus

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    container_name: exporter
    hostname: exporter
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
    ports:
      - 9100:9100
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"
    networks:
      iot:
        aliases:
          - exporter

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - 3000:3000
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin_1
    restart: unless-stopped
    deploy:
      replicas: 1
    networks:
      iot:
        aliases:
          - grafana

  elasticsearch:
    image: elasticsearch:8.9.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    restart: on-failure
    networks:
      iot:

  logstash:
    image: logstash:8.9.0
    container_name: logstash
    depends_on:
      - elasticsearch
    ports:
      - "5044:5044"
    volumes:
      - ./config/pipeline.conf:/usr/share/logstash/pipeline/pipeline.conf
    environment:
      XPACK_MONITORING_ENABLED: "false"
      LOGSTASH_PORT: 5044
      LOGSTASH_INDEX: "test-index"
      ELASTIC_HOST: "elasticsearch:9200"
      ELASTIC_USERNAME: "elastic"
      ELASTIC_PASSWORD: "elastic"
    restart: on-failure
    networks:
      iot:

  kibana:
    image: kibana:8.15.3
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      ELASTIC_USERNAME: "elastic"
      ELASTIC_PASSWORD: "elastic"
    depends_on:
      - elasticsearch
    restart: on-failure
    networks:
      iot:

  tsung:
    image: castelislogice/tsung:latest
    container_name: tsung
    depends_on:
      - nanomq
    ports:
      - "8081:8081"
    volumes:
      - ./tsung:/etc/tsung
    environment:
      - TSUNG_CONFIG=/etc/tsung/test.xml
    restart: unless-stopped
    networks:
      iot:
        aliases:
          - tsung

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      iot:
        aliases:
          - redis

  nginx:
    image: nginx:latest
    ports:
      - 30880:30880
    volumes:
      - ./config/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - server_rule
    networks:
      iot:
        aliases:
          - nginx

networks:
  iot:
    driver: overlay
    attachable: true


volumes:
  pgadmin-data:
  es_data:
  elasticsearch_data:
  postgdata-primary:
  # postgdata-replica:
  # citus-data:
  # citus-worker1-data: